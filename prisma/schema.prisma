generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  username String
  email String @unique
  password String
  roles UserRoles @default(user)
  userStatus UserStatus?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserStatus {
  id String @id @default(uuid())
  banTime DateTime?
  reason String?
  banCount Int @default(0)
  user User @relation(fields: [userId], references: [id])
  userId String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
enum UserRoles {
  admin
  user
}

model Book {
  id String @id @default(uuid())
  title String @unique
  synopsis String
  author String
  coverImg String
  status BookStatus @default(ongoing)
  type BookType
  tags String[]
  chapters Chapter[]
  createBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum BookType {
  manga
  manhua
  manhwa
}

enum BookStatus {
  ongoing
  paused
  hiatus
  dropped
}

model Tag {
  id String @id @default(uuid())
  name String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Chapter {
  id String @id @default(uuid())
  chapterName String
  chapterNum Int
  book Book @relation(fields: [bookId], references: [id])
  bookId String
  page Page[]
  createBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([bookId, chapterNum])
}

model Page {
  id String @id @default(uuid())
  pageImages String[]
  chapter Chapter @relation(fields: [chapterId], references: [id])
  chapterId String
  createBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

